/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import React, { useEffect, useRef } from "react";
import { QRCodeCanvas } from "qrcode.react";
import NextImage from "next/image"; // ✅ alias to avoid collision
import { X } from "lucide-react";

// Helper to fill a rounded rectangle
function fillRoundedRect(
  ctx: CanvasRenderingContext2D,
  x: number,
  y: number,
  w: number,
  h: number,
  r: number
) {
  const rr = Math.max(0, Math.min(r, Math.min(w, h) / 2));
  ctx.beginPath();
  ctx.moveTo(x + rr, y);
  ctx.arcTo(x + w, y, x + w, y + h, rr);
  ctx.arcTo(x + w, y + h, x, y + h, rr);
  ctx.arcTo(x, y + h, x, y, rr);
  ctx.arcTo(x, y, x + w, y, rr);
  ctx.closePath();
  ctx.fill();
}

type Props = {
  open: boolean;
  onClose: () => void;
  url: string;
};

export default function QrModal({ open, onClose, url }: Props) {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);

  useEffect(() => {
    if (!open) return;
    const onKey = (e: KeyboardEvent) => e.key === "Escape" && onClose();
    document.addEventListener("keydown", onKey);
    const prevOverflow = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    return () => {
      document.removeEventListener("keydown", onKey);
      document.body.style.overflow = prevOverflow;
    };
  }, [open, onClose]);

  if (!open) return null;
  const hasUrl = Boolean(url);

  // Compose QR + gradient border + logo into one PNG
  function handleDownload() {
    const qrCanvas = canvasRef.current;
    if (!qrCanvas) return;

    // Layout tuning
    const border = 24;
    const radius = 24;
    const innerPad = 20;
    const gap = 16;
    const logoW = 110;
    const logoH = 45;

    const qrPx = qrCanvas.width; // actual pixels of the QR canvas
    const innerW = qrPx + innerPad * 2;
    const innerH = qrPx + innerPad * 2 + gap + logoH;
    const outW = innerW + border * 2;
    const outH = innerH + border * 2;

    // HiDPI export
    const dpr = window.devicePixelRatio || 1;
    const out = document.createElement("canvas");
    out.width = Math.round(outW * dpr);
    out.height = Math.round(outH * dpr);
    const ctx = out.getContext("2d");
    if (!ctx) return;
    ctx.scale(dpr, dpr);

    // Gradient border
    const grad = ctx.createLinearGradient(0, 0, 0, outH);
    grad.addColorStop(0, "#3D6984");
    grad.addColorStop(1, "#1C2E4A");
    ctx.fillStyle = grad;
    fillRoundedRect(ctx, 0, 0, outW, outH, radius);

    // Inner white panel
    ctx.fillStyle = "#ffffff";
    fillRoundedRect(ctx, border, border, innerW, innerH, radius - 6);

    // Draw QR
    const qrX = border + innerPad;
    const qrY = border + innerPad;
    ctx.drawImage(qrCanvas, qrX, qrY, qrPx, qrPx);

    // Draw logo (use browser constructor, not Next.js <Image/>)
    const img = new window.Image(); // ✅ use DOM constructor
    img.src = `${window.location.origin}/images/logo.svg`;
    // If you ever serve from another domain, consider:
    // img.crossOrigin = "anonymous";

    img.onload = () => {
      const lx = border + (innerW - logoW) / 2;
      const ly = border + innerPad + qrPx + gap;
      ctx.drawImage(img, lx, ly, logoW, logoH);

      const data = out.toDataURL("image/png");
      const a = document.createElement("a");
      a.href = data;
      a.download = "qr-code.png";
      document.body.appendChild(a);
      a.click();
      a.remove();
    };

    img.onerror = () => {
      // fallback: still allow download without logo
      const data = out.toDataURL("image/png");
      const a = document.createElement("a");
      a.href = data;
      a.download = "qr-code.png";
      document.body.appendChild(a);
      a.click();
      a.remove();
    };
  }

  return (
    <div
      onClick={(e) => e.currentTarget === e.target && onClose()}
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4"
      role="dialog"
      aria-modal="true"
      aria-label="QR Code modal"
    >
      <div className="w-full max-w-lg rounded-2xl bg-white p-8 shadow-xl relative">
        {/* Close (X) icon top-right */}
        <button
          onClick={onClose}
          className="absolute right-5 top-5 rounded-full border border-[#E5EBF0] p-2 hover:bg-[#F8FAFB] transition"
          aria-label="Close"
        >
          <X className="w-4 h-4 text-[#1C2E4A]" strokeWidth={2.5} />
        </button>

        {/* Title */}
        <h4 className="text-xl font-semibold text-[#1C2E4A] mb-4 text-left">
          QR Code
        </h4>

        {/* Description */}
        <p className="text-center text-[15px] text-[#0F1F33] mb-6">
          A unique QR Code has been generated by the system for this asset.
        </p>

        {/* QR + logo area */}
        {hasUrl ? (
          <div className="relative mx-auto w-fit p-7 rounded-[24px] bg-gradient-to-b from-[#3D6984] to-[#1C2E4A]">
            <div className="bg-white rounded-2xl p-5 flex flex-col items-center">
              <QRCodeCanvas
                ref={canvasRef as any}
                value={url}
                size={280} // visible size
                includeMargin
              />
              {/* On-screen logo (download uses canvas draw above) */}
              <div className="mt-4 flex justify-center">
                <NextImage
                  src="/images/logo.svg"
                  alt="C&A Retention"
                  width={130}
                  height={45}
                  style={{ objectFit: "contain" }}
                />
              </div>
            </div>
          </div>
        ) : (
          <div className="text-sm text-[#6B7C8F] text-center mt-4">
            No URL provided.
          </div>
        )}

        {/* Buttons stacked under each other */}
        {hasUrl && (
          <div className="mt-8 flex flex-col items-center gap-3">
            <button
              onClick={handleDownload}
              className="w-full rounded-full bg-gradient-to-b from-[#3D6984] to-[#1C2E4A] px-8 py-3 text-white text-[15px] font-medium shadow hover:opacity-95 transition"
            >
              Download as PNG
            </button>
            <button
              onClick={onClose}
              className="w-full rounded-full bg-gradient-to-b from-[#3D6984] to-[#1C2E4A] px-8 py-3 text-white text-[15px] font-medium shadow hover:opacity-95 transition"
            >
              Done
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
